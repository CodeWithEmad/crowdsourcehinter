function CrowdsourceHinter(runtime, element, data){

    var executeHinter = true;
    var isShowingHintFeedback = false;
    var voted = false;
    var correctSubmission = false;
    
    $(".crowdsourcehinter_block", element).hide();

    if(!executeHinter){
        return;
    }

    /**
     * Set executeHinter to false, disabling the hinter xblock. Triggered by switching units
     * in edX course.
     * This is a workaround for when a student switches to/from a unit and causes multiple
     * instances of the hinter to be running.
     */
    function stopScript(){
        executeHinter = false;
    }
    Logger.listen('seq_next', null, stopScript);
    Logger.listen('seq_prev', null, stopScript);
    Logger.listen('seq_goto', null, stopScript);

    /**
     * Get a hint to show to the student after incorrectly answering a question.
     * @param data is data generated by the problem_graded event
     */
    function get_hint(data){
        $(".crowdsourcehinter_block", element).show();
        $.ajax({
            type: "POST",
            url: runtime.handlerUrl(element, 'get_hint'),
            data: JSON.stringify({"submittedanswer": unescape(data[0])}),
            success: showHint
        });
    }

    /**
     * Start student hint feedback. This function is called after the student answers
     * the question correctly.
     */
    function start_feedback(){
        $('.csh_correct', element).show();
        $(".csh_hint_reveal", element).hide();
        //send empty data for ajax call because not having a data field causes error
        $.ajax({
            type: "POST",
            url: runtime.handlerUrl(element, 'get_feedback'),
            data: JSON.stringify({}),
            success: showStudentContribution
        });
    }

    /**
     * Check whether student answered the question correctly and call the appropriate
     * function afterwards. Current method for determining correctness if very brittle.
     * @param event_type, element are both unused but automatically passed
     * @param data is generated by problem_graded event, contains status and data of the problem block
     */
    function onStudentSubmission(){ return function(event_type, data, element){
        //search method of correctness of problem is brittle due to checking for a class within
        //the problem block.
        if (data[1].search(/class="correct/) === -1){
            get_hint(data);
        } else { //if the correct answer is submitted
            start_feedback();
        }
    }}
    Logger.listen('problem_graded', data.hinting_element, onStudentSubmission());

    /**
     * Modify csh_Hints attributes to show hint to the student.
     */
    function showHint(result){
        $('.csh_Hints', element).attr('student_answer', result.StudentAnswer);
        $('.csh_Hints', element).attr('hint_received', result.Hints);
        $('.csh_Hints', element).text("Hint: " + result.Hints);
        Logger.log('crowd_hinter.showHint', {"student_answer": result.StudentAnswer, "hint_received": result.Hints});
    }

    /**
     * Called by showStudentContribution to append hints into divs created by
     * showStudentSubmissoinHistory, after the student answered the question correctly.
     * Feedback on hints at this stage consists of upvote/downvote/report buttons.
     * @param hint is the first hint that was shown to the student
     * @param student_answer is the first incorrect answer submitted by the student
     */
    function showHintFeedback(hint, student_answer){
        $(".csh_student_answer", element).each(function(){
            if ($(this).find('.csh_answer_text').attr('answer') == student_answer){
                var html = "";
                $(function(){
                    var data = {
                        hint: hint
                    };
                    html = Mustache.render($("#show_hint_feedback").html(), data);
                });
                $(this).append(html);
                var html = "";
                var template = $('#add_hint_creation').html();
                var data = {};
                html = Mustache.render(template, data);
                $(this).append(html);
            }
        });
    }

    /**
     * Show options to remove or return reported hints from/to the hint pool. Called after
     * correctly answering the question, only visible to staff.
     * @param result is the reported hint text
     */
    function showReportedFeedback(result){
        var html = "";
        $(function(){
            var template = $('#show_reported_feedback').html();
            var data = {
                hint: result
            };
            html = Mustache.render(template, data);
        });
        $(".csh_reported_hints", element).append(html);
    }

    /**
     * Append new divisions into html for each answer the student submitted before correctly 
     * answering the question. showHintFeedback appends new hints into these divs.
     * When the hinter is set to show best, only one div will be created.
     * @param student_answers is the text of the student's incorrect answer
     */
    function showStudentSubmissionHistory(student_answers){
        var html = "";
        var template = $('#show_answer_feedback').html();
        var data = {
            answer: student_answers
        };
        html = Mustache.render(template, data);
        $(".csh_feedback", element).append(html);
    }

    /**
     * Set up student feedback on hints and contribution of new hints. Incorrect answer(s) and the
     * the corresponding hint(s) shown to the student are displayed. Students can upvote/downvote/report
     * hints or contribute a new hint for their incorrect answer(s).
     * Only one incorrect answer and hint will be shown when the hinter is set to show best.
     * @param result is a dictionary of incorrect answers and hints, with the index being the hint and the value
     * being the incorrect answer
     */
    function showStudentContribution(result){
    //Set up the student feedback stage. Each student answer and all answer-specific hints for that answer are shown
    //to the student, as well as an option to create a new hint for an answer.
        if(data.isStaff){
            $('.crowdsourcehinter_block', element).attr('class', 'crowdsourcehinter_block_is_staff');
            $.each(result, function(index, value) {
                if(value == "Reported") {
                    //index represents the reported hint's text
                    showReportedFeedback(index);
                }
            });
        }
        if(!isShowingHintFeedback){
            $.each(result, function(index, value) {
              if(value != "Reported"){
                showStudentSubmissionHistory(value);
                student_answer = value;
                hint = index;
                //hints return null if no answer-specific hints exist
                if(hint === "null"){
                    $(".csh_student_answer", element).each(function(){
                        if ($(this).find('.csh_answer_text').attr('answer') == student_answer){
                            var html = "";
                            var template = $('#show_no_hints').html();
                            var data = {};
                            html = Mustache.render(template, data);
                            $(this).append(html);
                            var html = "";
                            var template = $('#add_hint_creation').html();
                            var data = {};
                            html = Mustache.render(template, data);
                            $(this).append(html);
                        }
                    });
                }
                //reported hints have their corresponding answer set to "Reported"
                else {
                    showHintFeedback(hint, student_answer);
                }
              }
            });
            isShowingHintFeedback = true;
        }
    }

    /**
     * Create a text input area for the student to create a new hint. This function
     * is triggered by clicking the "contribute a new hint" button.
     * @param clicked is the "contribute a new hint" button that was clicked
     */
    function create_text_input(){ return function(clicked){
        $('.csh_student_hint_creation', element).each(function(){
            $(clicked.currentTarget).show();
        });
        $('.csh_student_text_input', element).remove();
        $('.csh_submit_new', element).remove();
        $(clicked.currentTarget).hide();
        student_answer = $(clicked.currentTarget).parent().parent().find('.csh_answer_text').attr('answer');
        $(".csh_student_answer", element).each(function(){
            if ($('.csh_answer_text', element).attr('answer') == student_answer){
                var html = "";
                $(function(){
                    var template = $('#student_hint_creation').html();
                    var data = {student_answer: student_answer};
                    html = Mustache.render(template, data); 
                });
                $(this).append(html);
            }
        });
    }}
    $(element).on('click', '.csh_student_hint_creation', create_text_input($(this)));

    /**
     * Submit a new hint created by the student to the hint pool. Hint text is in
     * the text input area created by create_text_input. Contributed hints are specific to 
     * incorrect answers. Triggered by clicking the "submit hint" button.
     * @param clicked is the "submit hint" button clicked
     */
    function submit_new_hint(){ return function(clicked){
    //add the newly created hint to the hinter's pool of hints
        if($('.csh_student_text_input', element).val().length > 0){
            var answerdata = unescape(clicked.currentTarget.attributes['answer'].value);
            var newhint = unescape($('.csh_student_text_input').val());
            $('.csh_submitbutton', element).show();
            $.ajax({
                type: "POST",
                url: runtime.handlerUrl(element, 'add_new_hint'),
                data: JSON.stringify({"submission": newhint, "answer": answerdata}),
                success: Logger.log('crowd_hinter.submit_new.click.event', {"student_answer": answerdata, "new_hint_submission": newhint})
            });
            $('.csh_student_text_input', element).remove();
            $(clicked.currentTarget).remove();
        }
    }}
    $(element).on('click', '.csh_submit_new', submit_new_hint($(this)));

    /**
     * Send vote data to modify a hint's rating (or mark it as reported). Triggered by
     * clicking a button to upvote, downvote, or report the hint (both before and after
     * the student correctly submits an answer).
     * @param clicked is the rate_hint button clicked (upvote/downvote/report)
     */
    function rate_hint(){ return function(clicked){
        rating = clicked.currentTarget.attributes['data-rate'].value;
        if(!voted || rating=="report"){
            if (rating == "report"){
                alert("This hint has been reported for review.");
            }
            hint = $('.csh_Hints', element).attr('hint_received');
            student_answer = $('.csh_Hints', element).attr('student_answer');
            $.ajax({
                type: "POST",
                url: runtime.handlerUrl(element, 'rate_hint'),
                data: JSON.stringify({"student_rating": rating, "hint": hint, "student_answer": student_answer}),
                success: Logger.log('crowd_hinter.rate_hint.click.event', {"hint": hint, "student_answer": student_answer, "rating": rating})
            });
            voted = true;
            }
    }}
    $(element).on('click', '.csh_rate_hint', rate_hint($(this)));

    /**
     * Remove a reported hint from the reported feedback area (for staff only). Hints
     * are removed from the feedback area regardless of whether they are to be permanently removed
     * from the hint pool or not. Called by staff_rate_hint.
     */
    function removeFeedback(){
        $('.csh_hint_value', element).each(function(){
            if($(this).attr('value') == hint){
                $(this).remove();
            }
        });
    }

    /**
     * Send staff rating data to determine whether or not a reported hint will be removed from the
     * hint pool or not. Triggered by clicking a staff_rate button.
     * @param clicked is the csh_staff_rate button that was clicked
     */
    function staff_rate_hint(){ return function(clicked){
        hint = $(clicked.currentTarget).parent().find(".csh_hint").text();
        rating = clicked.currentTarget.attributes['data-rate'].value
        student_answer = "Reported";
        Logger.log('crowd_hinter.staff_rate_hint.click.event', {"hint": hint, "student_answer": student_answer, "rating": rating});
        $.ajax({
            type: "POST",
            url: runtime.handlerUrl(element, 'rate_hint'),
            data: JSON.stringify({"student_rating": rating, "hint": hint, "student_answer": student_answer}),
            success: removeFeedback()
        });
    }}
    $(element).on('click', '.csh_staff_rate', staff_rate_hint($(this)));

}
